# simple version: use the most simple for testing

# v20: add pair none for removing history
#      change fix id of wall/gran to contact eleminate history
# v19: add ifallcustom in one file or separate
# v18: add ifairviscous to determine air viscous
# v17: add option for print only max atom or trackid atom to a file
# v16: put all irrelevent command to other file
# v15: use immediate variable as much as possible. i.e. use immediate variable $() if the variable only define before run
# v14: fix pour
# v13: add maxKEt in thermo file. 
#      restart file path changed
# v12: create atom method added. can choose create manually but not to use lattice
# v11: delete "then" in elif, put mp before kn
# v10: separate compute pair group for all and trace
# v9:  move timestep command to after unit defined
# v8:  compute pair group change from only tracegroup to all
# v7:  add runstep
# v6:  if append-->yes. simulation box extend, no delete when using createbox, 
#      correct unit of freeze region to box. set no output if freq_* =0
# v5:  rounding number
# v4:  store force before fix (after pair). so get pair force

# set simple start variable
variable  rst_from          equal 0
variable  runstep           equal 100

# initialization:
# timer
timer loop # loop off full sync

# cd to output
shell	mkdir	output
# create output folders
shell	mkdir	output/fix output/rst output/dump output/dumpimage output/dumpvtk output/dumpstl output/dumpmovie output/simulation_setting output/trace
# print start step
print "startstep ${rst_from}" screen no append output/simulation_setting/attribute.lammps
# step start from. weather rotate start.
variable  ts          equal 4e-7
print "timestep ${ts}" screen no append output/simulation_setting/attribute.lammps
variable  reset_history   string yes
variable	ifrotate		string no
variable	trace_id1		equal 0  # 0 means no trace
variable	trace_id2		equal 0  # 0 means no trace
variable	trace_id3		equal 0  # 0 means no trace
variable	iftrace_maxKE		string yes
variable	ifappend		string no
variable	iffreeze		string no
# create atom method
variable	create_atom_method			string latt # no means no create , latt means lattice, manu means manully
variable	ifpour			string no
variable  pourstep    equal 100
variable  pour_number equal 240000
variable  ifdeposit   string no
variable  deposit_number equal 120000

# chunk method
variable	chunk_method		string rz #x xy xyz r rz rzt NONE
# store force
variable	ifstoreforce		string no
# ifsetvelocity
variable	ifsetvelocity		string no
# reset dt
variable	ifresetdt		string no
# recount dof
if		"(${ifpour} == yes) || (${ifdeposit} == yes)" then &
  "variable	recount_dof		string yes" &
else &
  "variable	recount_dof		string no"
# frequency output
variable	freq_restart		equal 500000

variable	freq_dump_trace_image	equal 0
variable	freq_dump_all_image	equal 0

variable	freq_dump_trace_custom	equal 0
variable	freq_dump_all_custom	equal 0
variable  if_all_custom_sep string no
variable	freq_print_single_trace_max	equal 0
variable	freq_print_single_trace_1	equal 0
variable	freq_print_single_trace_2	equal 0
variable	freq_print_single_trace_3	equal 0

variable	freq_dump_trace_pair	equal 0
variable	freq_dump_all_pair	equal 0

variable	freq_dump_other		equal 0
variable	freq_thermo		equal 10000
variable	freq_fixvector		equal 0
variable	every_fixvector		equal 1
variable	freq_ave_chunk_momentum_mass_field		equal 0  #Nevery=2, Nrepeat=6, and Nfreq=100, then 90,92,94,96,98,100
variable	repeat_ave_chunk_momentum_mass_field	equal 1
variable	every_ave_chunk_momentum_mass_field		equal 1
variable	freq_ave_wall		equal 0  #Nevery=2, Nrepeat=6, and Nfreq=100, then 90,92,94,96,98,100
variable	repeat_ave_wall		equal 1
variable	every_ave_wall		equal 1

# jump if restart from nonzero step
# this command specify in jobscribe "variable	rst_from equal N" be used as suffix in output file name
if		"${rst_from} != 0" then &
  "read_restart restart.${rst_from}"


# number of type
variable	n_type			equal 3 #1 or 3 or  0 means no create
print "n_type ${n_type}" screen no append output/simulation_setting/attribute.lammps

# if air viscous
variable	ifairviscous		string no
variable  gamma_air       equal 1

# gravitational acceleration
variable	g			equal 9.8
print "gravitational_acceleration ${g}" screen no append output/simulation_setting/attribute.lammps


# particle diameter
variable	dp 			equal 8.3e-4		#particle diameter
print "diameter ${dp}" screen no append output/simulation_setting/attribute.lammps
# calculate radius
variable	rp		equal $(v_dp/2)		#particle radius
# particle density
variable	den 			equal 2500
print "density ${den}" screen no append output/simulation_setting/attribute.lammps
# calculate mass
variable	mp 		equal $(4/3*PI*v_rp^3*v_den)
# radius of big and small atom
variable        dp_big_dp_unit		equal 1.1
variable	dp_small_dp_unit 	equal 0.9

# skin
variable	skin_dp_unit		equal 0.5

# container size simulation box size
variable	ri_dp_unit		equal 36	#inner radius
variable	width_dp_unit		equal 17	#width
variable  z_bottom_dp_unit equal 0
# calculate ro
variable	ro_dp_unit		equal $(v_ri_dp_unit+v_width_dp_unit)
# ro for box
if "${ifappend} == no" then &
  " variable r_box_dp_unit equal $(v_ro_dp_unit) " &
else &
  " variable r_box_dp_unit equal $(v_ro_dp_unit+2) "

# size of region to insert atoms
variable	ri_delete_dp_unit	equal $(0.5*v_dp_big_dp_unit + v_ri_dp_unit)
variable	ro_insert_dp_unit	equal $(-0.5*v_dp_big_dp_unit + v_ro_dp_unit)
variable	zlo_create_dp_unit	equal 0.55
variable  zhi_create_dp_unit	equal 40
# zhi for box
variable	zhi_box_dp_unit		equal $(1.1*v_zhi_create_dp_unit+1)
# chunk height
variable	zhi_chunk_dp_unit	equal $(v_zhi_box_dp_unit)	#height
# pour zlo zhi
variable	zlo_pour_dp_unit	equal $(v_zhi_box_dp_unit-2+0.999999999)
variable	zhi_pour_dp_unit	equal $(v_zhi_box_dp_unit-1)

# freeze region size
variable	zhi_freeze_dp_unit	equal 29
variable	ri_freeze_dp_unit	equal $(v_ri_dp_unit-v_dp_big_dp_unit/2)
variable	ro_freeze_dp_unit	equal $(v_ro_dp_unit+v_dp_big_dp_unit/2)

# contact model variable
variable	kn		equal $(1.e6*v_mp*v_g/v_dp)
variable	kt		equal $(2/7*v_kn)
variable	gamma_n		equal $(317*sqrt(v_g/v_dp))
variable	gamma_t 	equal $(v_gamma_n/2)
variable	xmu		equal 0.5
print "kn ${kn}" screen no append output/simulation_setting/attribute.lammps
print "kt ${kt}" screen no append output/simulation_setting/attribute.lammps
print "gamma_n ${gamma_n}" screen no append output/simulation_setting/attribute.lammps
print "gamma_t ${gamma_t}" screen no append output/simulation_setting/attribute.lammps
print "friction_coefficient ${xmu}" screen no append output/simulation_setting/attribute.lammps
variable	ifdamp_tangent	equal 1
# number of chunk
variable	N_bin_x 	equal 50 
variable	N_bin_y 	equal 50
variable	N_bin_z 	equal 50
variable	N_bin_r 	equal ${width_dp_unit} 
variable	N_bin_theta	equal 50

# salvage number
variable	Sa 		equal 2e-6

# calculate container size
variable	ro		equal $(v_ro_dp_unit*v_dp)
variable	ri 		equal $(v_ri_dp_unit*v_dp)
variable  z_bottom equal $(v_z_bottom_dp_unit*v_dp)
print "ro ${ro}" screen no append output/simulation_setting/attribute.lammps
print "ri ${ri}" screen no append output/simulation_setting/attribute.lammps
print "z_bottom ${z_bottom}" screen no append output/simulation_setting/attribute.lammps

# calculate chunk height
variable	zhi_chunk	equal v_zhi_chunk_dp_unit*v_dp
# calculate simulation box size
variable r_box equal $(v_r_box_dp_unit*v_dp)
variable zhi_box 	equal $(v_zhi_box_dp_unit*v_dp)
# calculate diameter of big and small
variable	dp_big		equal $(v_dp_big_dp_unit*v_dp)
variable	dp_small	equal $(v_dp_small_dp_unit*v_dp)
print "dp_big ${dp_big}" screen no append output/simulation_setting/attribute.lammps
print "dp_small ${dp_small}" screen no append output/simulation_setting/attribute.lammps

# calculate skin
variable	skin		equal $(v_skin_dp_unit*v_dp)

# calculate size of region to create atoms
variable	ri_delete	equal $(v_ri_delete_dp_unit*v_dp)
variable	ro_insert	equal $(v_ro_insert_dp_unit*v_dp)
variable	zlo_create	equal $(v_zlo_create_dp_unit*v_dp)
variable	zhi_create	equal $(v_zhi_create_dp_unit*v_dp)

# calculate pour zlo zhi
variable	zlo_pour	equal $(v_zlo_pour_dp_unit*v_dp)
variable	zhi_pour	equal $(v_zhi_pour_dp_unit*v_dp)

# calculate number of bin
variable	N_total_bin 	equal v_N_bin_r*v_N_bin_theta*v_N_bin_z
variable	N_total_rz 	equal v_N_bin_r*v_N_bin_z

# calculate inner wall speed
if           "${ifrotate} == no" then "variable Sa equal 0" #change
variable	omega_in 	equal $(sqrt(v_Sa*v_g*(v_ro-v_ri)^3/(v_dp)^2/v_ri^2))
variable	in_velocity 	equal $(v_omega_in*v_ri)


# define cylinder coordinate position velocity
variable	d_z_axis	atom sqrt(x*x+y*y)
variable	theta 		atom atan2(y,x)
variable	vr 		atom (vx*x+vy*y)/sqrt(x*x+y*y)
variable	vt 		atom (vx*(-y)+vy*x)/sqrt(x*x+y*y)
variable	check_vrvtvxvy 	atom v_vt*v_vt+v_vr*v_vr-vx*vx-vy*vy

# calculate chunk id
variable	rbin		atom "floor( (v_d_z_axis-v_ri)/ (v_ro-v_ri)* v_N_bin_r )"
variable	zbin		atom "floor(z/ v_zhi_chunk* v_N_bin_z)"
variable        chunk_id_r_z	atom 1+v_N_bin_r*v_zbin+v_rbin


# calculate freeze region size
variable	zhi_freeze		equal $(v_zhi_freeze_dp_unit*v_dp)
variable	ri_freeze		equal $(v_ri_freeze_dp_unit*v_dp)
variable        ro_freeze		equal $(v_ro_freeze_dp_unit*v_dp)

# lattice primitive vectors length
variable	edge_lattice		equal $(2/(sqrt(3))*v_dp_big)
variable	z_fraction_of_lattice	equal $(sqrt(3)/4)

#newton
#newton       on

# jump to restart section
if	"${rst_from} > 0" 	then "jump SELF restart_jump"

# setting, no restart
atom_style	sphere
atom_modify	map array
boundary	f f f 
units		si
#timestep
timestep     ${ts}
# communication, no restart
comm_style	brick
comm_modify	vel yes

# reg to define box, no restart
region		simulation_box cylinder z 0. 0. ${r_box} 0. ${zhi_box} units box

# create box
create_box	${n_type} simulation_box
# contact force style, no restart
pair_style	gran/hooke/history ${kn} ${kt} ${gamma_n} ${gamma_t} ${xmu} ${ifdamp_tangent}
pair_coeff	* *

# insert region
region	out_inbdy_insert 	cylinder z 0. 0. ${ri_delete} 0 ${zhi_box} units box side out
region	in_outbdy_insert 	cylinder z 0. 0. ${ro_insert} ${zlo_create} ${zhi_create} units box
region	region_ins_0		intersect 2 out_inbdy_insert in_outbdy_insert

# insert more region
region	out_inbdy_append 	cylinder z 0. 0. ${ri_freeze} 0 ${zhi_freeze} units box side out
region	in_outbdy_append 	cylinder z 0. 0. ${ro_freeze} 0 ${zhi_freeze} units box
region	region_append		intersect 2 out_inbdy_append in_outbdy_append

# extend insert region to freeze region
if "${ifappend} == no" then &
  "region	region_ins	intersect 2 out_inbdy_insert in_outbdy_insert" &
else &
  "region	region_ins	union 2 region_ins_0 region_append"


if "${create_atom_method} == no" then &
  "jump SELF end_create"

# create particle at lattice, no restart
# with scale = 1, a1 = 1 0 0, a2 = 0 1 0, and a3 = 0 0 1, no restart
lattice       bcc ${edge_lattice} origin 0 0 ${z_fraction_of_lattice}



if "${n_type} == 3" then &
  "jump SELF begin3type" &
elif "${n_type} == 1" &
  "jump SELF begin1type" &
else &
  "print 'n_type not 3 or 1'"

# 3type begin
label		begin3type

# jump create atom by lattice
if "${create_atom_method} != latt" then &
  "jump SELF end_lattice1"

create_atoms	2 region region_ins units lattice
label   end_lattice1
set		atom * type/fraction 1 0.6 12393
set		type 1 type/fraction 3 0.5 12235
# set diameter before density, otherwise mass won't fit, no restart
set		type 1 diameter ${dp_small}
set		type 2 diameter ${dp}
set		type 3 diameter ${dp_big}
set		atom * density 	${den}
# 3type end
jump		SELF end_create

# 1type begin
label		begin1type
# jump create atom by lattice
if "${create_atom_method} != latt" then &
  "jump SELF end_lattice2"
create_atoms	1 region region_ins units lattice
label   end_lattice2

if "${create_atom_method} != manu" then &
  "jump SELF end_manu1"
#create_atoms	1 region region_ins units lattice 
# test create 1 single atoms let inner wall collision
create_atoms 1 single $(0*0.00083) $(40*0.00083) $(0.50001*0.00083) units box
# test set velocity
set atom 1 vy $(-1.0*0.00083)
#set atom 1 vz $(-1.0*0.00083)
#set atom 2 vy $(1.0*0.00083)
# test non parallel rotate (Say contact point is c, the plane composited by vc and ac will changed over the contact time.)
set atom 1 omega 0.0 0 0
label   end_manu1

# set diameter before density, otherwise mass won't fit, no restart
set		type * diameter ${dp}
set		atom * density 	${den}
# 1type end
label		end_create


# balance
#balance 	1.0 shift yz 50 1.05

# file, restart 0 step
write_restart	output/rst/restart_0

# jump gravity ifpour and step from 0
if "${ifpour} == no || ${rst_from} != 0" then "jump SELF end_pour5"
# gravity
fix	gravi 		all gravity $g vector 0.0 0.0 -1.0
if "${ifstoreforce} == yes" then "fix	force_all	all store/force"
# gravitational potential
fix_modify		gravi energy yes
label	end_pour5
# pour region, block, z-axis cylinder, side = in, no restart
if "${ifpour} == no || ${rst_from} != 0" then "jump SELF end_pour"
label	begin_pour
region	pour_region	cylinder z 0. 0. ${ro_insert} ${zlo_pour} ${zhi_pour} units box
fix	pour_fix	all pour ${pour_number} 1 300719 region pour_region diam poly 3 $(0.9*v_dp) 0.3 $(v_dp) 0.4 $(1.1*v_dp) 0.3 dens 2500 2500 vol 100000 1
label	end_pour

# deposit region, block, z-axis cylinder, side = in, no restart
if "${ifdeposit} == no || ${rst_from} != 0" then "jump SELF end_deposit"

label	begin_deposit
region  deposit_in_region_sideout cylinder z 0. 0. ${ri_delete} ${zlo_pour} ${zhi_pour} units box side out
region  deposit_out_region	cylinder z 0. 0. ${ro_insert} ${zlo_pour} ${zhi_pour} units box
region  deposit_region intersect 2 deposit_in_region_sideout deposit_out_region

if "${n_type} == 3" then &
  "jump SELF begin3type_deposit" &
elif "${n_type} == 1" &
  "jump SELF begin1type_deposit" &
else &
  "print 'n_type not 3 or 1'"

# 1type deposit begin
label		begin1type_deposit

fix	deposit_type1_fix	all deposit ${v_deposit_number} 1 1 29494 region deposit_region near ${dp} units box
set		type * diameter ${dp}
set		atom * density 	${den}
jump SELF end_deposit

# 3type deposit begin
label		begin3type_deposit
# set diameter before density, otherwise mass won't fit, no restart

variable number_type1 equal $(0.3*v_deposit_number)
variable number_type2 equal $(0.4*v_deposit_number)
variable number_type3 equal $(0.3*v_deposit_number)
fix	deposit_type1_fix	all deposit ${number_type1} 1 4 29494 region deposit_region near ${dp_big} units box
fix	deposit_type2_fix	all deposit ${number_type2} 2 3 12235 region deposit_region near ${dp_big} units box
fix	deposit_type3_fix	all deposit ${number_type3} 3 4 777 region deposit_region near ${dp_big} units box
set		type 1 diameter ${dp_small}
set		type 2 diameter ${dp}
set		type 3 diameter ${dp_big}
set		atom * density 	${den}
jump SELF end_deposit

label	end_deposit

label		restart_jump

if "${reset_history} == no || ${rst_from} == 0" then &
  "jump SELF reset_pair_history_end"
pair_style none
run 1
pair_style	gran/hooke/history ${kn} $(7/2*v_kn) ${gamma_n} ${gamma_t} ${xmu} ${ifdamp_tangent}
pair_coeff	* *
label   reset_pair_history_end

# bin size and memory
neighbor	${skin} bin
neigh_modify	delay 0

# particle force (apply force from the one need to be output and small to large)
# store force fx fy fz
if "${ifstoreforce} == yes" then "fix	force_pair	all store/force"

# wall force to particles
# inner wall
# define inner wall, if pour then define inner wall after pouring
if "${ifpour} == yes && ${rst_from} == 0" then "jump SELF end_pour6_innerwall"
if "${ifrotate} == yes" then &
  "fix	inwall		all wall/gran hooke/history ${kn} ${kt} ${gamma_n} ${gamma_t} ${xmu} ${ifdamp_tangent} zcylinder ${ri} shear x ${in_velocity}" &
else &
  "fix	inwall		all wall/gran hooke/history ${kn} ${kt} ${gamma_n} ${gamma_t} ${xmu} ${ifdamp_tangent} zcylinder ${ri}"
label	end_pour6_innerwall

# other wall
if "${ifstoreforce} == yes" then "fix	force_in	all store/force"

fix	outwall 	all wall/gran hooke/history ${kn} ${kt} ${gamma_n} ${gamma_t} ${xmu} ${ifdamp_tangent} zcylinder ${ro}
if "${ifstoreforce} == yes" then "fix	force_in_out	all store/force"
fix	zplane_bottom 	all wall/gran hooke/history ${kn} ${kt} ${gamma_n} ${gamma_t} ${xmu} ${ifdamp_tangent} zplane ${z_bottom} NULL
if "${ifstoreforce} == yes" then "fix	force_in_out_zplane	all store/force"


# jump gravity ifpour and step from 0
if "${ifpour} == yes && ${rst_from} == 0" then "jump SELF end_pour4"
# gravity
fix	gravi 		all gravity $g vector 0.0 0.0 -1.0
if "${ifstoreforce} == yes" then "fix	force_all	all store/force"
# gravitational potential
fix_modify		gravi energy yes
label	end_pour4

if "${iffreeze} == no" then "jump SELF label_end_freeze"
# freeze region
region	region_freeze	block INF INF INF INF INF ${zhi_freeze} units box
# freeze atoms, but freeze_group not to be re-define when restart
if      "${rst_from} == 0"	then "group	freeze_group	region region_freeze"
if	"${ifsetvelocity} == yes"	then "velocity freeze_group set 0 0 0"
fix	freeze_fix	freeze_group freeze

label	label_end_freeze

# air viscous
if "${ifairviscous} == no" then &
  "jump SELF end_airviscous"
print "gamma_air ${gamma_air}" screen no append output/simulation_setting/attribute.lammps
fix airviscous all viscous $(v_gamma_air*v_mp)
label   end_airviscous

# ensure temperture normalize correctly as particle number change. use when pour and temperature compute ke
if "${recount_dof} == yes" then &
  "compute_modify		thermo_temp dynamic/dof yes"

# nve integration update position velocity
if "${ifresetdt} == yes" then &
  "fix	reset		all dt/reset 1 NULL 0.000001 1e-4 emax 1e-7 units box"
fix	integr		all nve/sphere

# output

# compute chunk
if "${freq_ave_chunk_momentum_mass_field} == 0" then "jump SELF skip_ave_chunk"
compute		chunk_r_z all chunk/atom v_chunk_id_r_z limit ${N_total_rz} exact
# file, output by fix ave/chunk
if "${freq_ave_chunk_momentum_mass_field} == 0" then "jump SELF skip_ave_chunk"
fix		avspatial all ave/chunk ${every_ave_chunk_momentum_mass_field} ${repeat_ave_chunk_momentum_mass_field} ${freq_ave_chunk_momentum_mass_field} chunk_r_z v_vr v_vt vz file output/fix/file_avspatial_${rst_from}
label skip_ave_chunk

# file, dump custom all atoms
if "${freq_dump_all_custom} == 0" then "jump SELF skip_dump_all_custom"

if "${if_all_custom_sep} == no" then "jump SELF skip_dump_all_custom_sepfile"
dump		dump_debug all custom ${freq_dump_all_custom} output/dump/all*.dump id type radius c_KEt_atom c_KEr_atom x y z vx vy vz fx fy fz omegax omegay omegaz tqx tqy tqz v_EKP_atom f_force_all[*] f_force_pair[*] c_n_contact v_check_nb_all v_KEtr_atom
dump_modify	dump_debug append no format float %.16g
label skip_dump_all_custom_sepfile

if "${if_all_custom_sep} == yes" then "jump SELF skip_dump_all_custom_allinonefile"
dump		dump_debug all custom ${freq_dump_all_custom} output/dump/all_${rst_from}.dump id type radius c_KEt_atom c_KEr_atom x y z vx vy vz fx fy fz omegax omegay omegaz tqx tqy tqz v_EKP_atom f_force_all[*] f_force_pair[*] c_n_contact v_check_nb_all v_KEtr_atom
dump_modify	dump_debug append no format float %.16g
label skip_dump_all_custom_allinonefile
label skip_dump_all_custom

# compute pair all atoms
if "${freq_dump_all_pair} == 0" then "jump SELF skip_dump_all_pair"
compute		p_idtype_all all property/local patom1 patom2 ptype1 ptype2	#id_I id_J type_I type_J
compute		p_fv_all all pair/local dist fx fy fz force p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 	#p1,p2,p3,ft component. p4 ft magnitude. p5 p6 p7 vn. p8 p9 p10 vt. Force acting on I atom. Velocity is vi-vj
label skip_compute_pair
# file, pair all atoms
dump		dump_all_pair all local ${freq_dump_all_pair} output/dump/pair_all_${rst_from}.dump index c_p_idtype_all[*] c_p_fv_all[*]
dump_modify     dump_all_pair append yes
label skip_dump_all_pair

#file, image jpg all atoms
if "${freq_dump_all_image} == 0" then "jump SELF skip_dump_all_image"
dump		dump_image_all all image ${freq_dump_all_image} output/dumpimage/all_image*.jpg type diameter size 512 512 zoom 1
label skip_dump_all_image

# file, thermo
if "${freq_thermo} == 0" then "jump SELF skip_thermo"
thermo		${freq_thermo}
label skip_thermo

# run
run ${runstep}



